if(nrow(DEpval) > 0 ) { DE1[rownames(DEpval), i] <- DEpval[,"logFC"] }   # fill it with log FC
DEfc <- topTable(fit, sort.by = "p", p.value=1, n=nrow(fit)) # order by pvalue
# DEfc <- round(DEfc,3)
DEfcPOS <- DEfc[DEfc[,"logFC"] >0, "adj.P.Val", drop=F]  # now select only positive logFC
DEfcNEG <- DEfc[DEfc[,"logFC"] <0, "adj.P.Val", drop=F] * -1  # now select only negative logFC
DEfcTOT <- rbind(DEfcPOS[, ,drop=F], DEfcNEG[, ,drop=F]) # join them
DE2 <- cbind(DE2, rep(0, nrow(DE2)))  # create new column with zeros
colnames(DE2)[ncol(DE2)] <- i          # give it a name
DE2[rownames(DEfcTOT), i] <- DEfcTOT[,"adj.P.Val"]    # fill it with signed p-value
DE3 <- cbind(DE3, rep(0, nrow(DE3)))  # create new column with zeros
colnames(DE3)[ncol(DE3)] <- i          # give it a name
DE3[rownames(DEfc), i] <- DEfc[,"logFC"]    # fill it with logFC
med <- apply(Dataset[, idGR], 1, median)
medGE <- cbind(medGE, med[rownames(medGE)])
colnames(medGE)[ncol(medGE)] <- i
print(paste("done with", i))
}
DE4 <- abs(DE2)
write.table(DE1, paste0(namenorm, "/DEtot.txt"), sep = "\t", col.names=NA)
write.table(DE2, paste0(namenorm, "/DEdecFDR.txt"), sep = "\t", col.names=NA)
write.table(DE3, paste0(namenorm, "/DEdecFC.txt"), sep = "\t", col.names=NA)
write.table(DE4, paste0(namenorm, "/DEdecFDRabs.txt"), sep = "\t", col.names=NA)
write.table(medGE, paste0(namenorm, "/cpm_median.txt"), sep = "\t", col.names=NA)
write.table(summary, paste0(namenorm,"/DE_summary.txt"), sep="\t",col.names = NA, row.names =  c("under-expressed", "no difference","over-expressed"))
}
GRall
Dataset <- readr::read_csv("../KallistoCounts.csv")
#### Use this for TPM
# Dataset <- readr::read_csv("../KallistoTPM.csv")
#### Use this for the Coarse challenge
MetadataCoarse <- Metadata[!is.na(Metadata$CoarseLabels),]
DatasetFilt <- Dataset[, MetadataCoarse$Sample]
DatasetFilt
colnames(DatasetFilt) <- MetadataCoarse$CoarseLabels
namenorm0 <- "DEGs/DEGsCoarse"
library(readr)
library(limma )
library(edgeR)
#### Metadata
Metadata <- readr::read_csv("../MedatadaDream.csv")
#### Use this for counts
Dataset <- readr::read_csv("../KallistoCounts.csv")
#### Use this for TPM
# Dataset <- readr::read_csv("../KallistoTPM.csv")
#### Use this for the Coarse challenge
MetadataCoarse <- Metadata[!is.na(Metadata$CoarseLabels),]
DatasetFilt <- Dataset[, MetadataCoarse$Sample]
colnames(DatasetFilt) <- MetadataCoarse$CoarseLabels
namenorm0 <- "DEGs/DEGsCoarse"
#### Use this for the Fine challenge
# MetadataFine <- Metadata[!is.na(Metadata$FineLabels),]
# DatasetFilt <- Dataset[, MetadataFine$Sample]
# colnames(DatasetFilt) <- MetadataFine$FineLabels
# namenorm0 <- "DEGs/DEGsFine"
dir.create("DEGs")
dir.create(namenorm0)
# calculate Counts per million
DatasetNorm <- apply(DatasetFilt, 2, function(x) x/sum(x) * 10^6)
## Calculate DEG using either samples from the colorectal cancer (CRC) or breast cancer (BRCA)
for(canc in c("CRC", "BRCA")){
if(canc == "CRC"){
Dataset <- DatasetNorm[, grep("BRCA", colnames(DatasetNorm), invert = T)]
}else{
Dataset <- DatasetNorm[, grep("CRC", colnames(DatasetNorm), invert = T)]
}
namenorm <- paste(namenorm0, canc, sep="/" )
dir.create(namenorm)
DatasetFilt = Dataset[apply(Dataset, 1, function(x) length(x[x>4])>=3), ]
cpm1 <- DGEList(counts = DatasetFilt, group=factor(colnames(Dataset)))
allSamples <- colnames(Dataset)
GRall <- unique(colnames(Dataset))
DE1 <- data.frame(genes=rownames(cpm1))
rownames(DE1) <- rownames(cpm1)
DE1$genes <- NULL
DE2 <- DE1
DE3 <- DE1
medGE <- data.frame(genes=rownames(Dataset))
rownames(medGE) <- rownames(Dataset)
medGE$genes <- NULL
summary <- c()
for(i in GRall){
idGR<- which(allSamples == i)
cpm1$samples$group <- "rest"
cpm1$samples$group[idGR] <- i
cpm1$samples$group <- factor(cpm1$samples$group, levels= c( "rest", i))
design.mat <- model.matrix(~ 0 + cpm1$samples$group)
colnames(design.mat) <- levels(cpm1$samples$group)
# makeContrasts(MUvsWT=T.CD8-rest, levels=design.mat)
v <- voom(cpm1, design.mat, plot = FALSE)
fit = lmFit(v, design.mat)
fit = contrasts.fit(fit, c(-1, 1))
fit = eBayes(fit)
#####FROM HERE, select DEG only with adj pvalue<= 0.05
# just to verify the number of differentially expressed genes:
DEdt <- decideTests(fit, adjust.method="BH", p.value=0.05)
summary <- cbind(summary, summary(DEdt))
colnames(summary)[ncol(summary)] <- i
# save differentially expressed genes with adj.pvalue less than 0.05:
DEpval <- topTable(fit, sort.by = "p", p.value=0.05, n=nrow(fit))
DE1 <- cbind(DE1, rep(0, nrow(DE1)))   # create a column with zeros
colnames(DE1)[ncol(DE1)] <- i # give it a name
if(nrow(DEpval) > 0 ) { DE1[rownames(DEpval), i] <- DEpval[,"logFC"] }   # fill it with log FC
DEfc <- topTable(fit, sort.by = "p", p.value=1, n=nrow(fit)) # order by pvalue
# DEfc <- round(DEfc,3)
DEfcPOS <- DEfc[DEfc[,"logFC"] >0, "adj.P.Val", drop=F]  # now select only positive logFC
DEfcNEG <- DEfc[DEfc[,"logFC"] <0, "adj.P.Val", drop=F] * -1  # now select only negative logFC
DEfcTOT <- rbind(DEfcPOS[, ,drop=F], DEfcNEG[, ,drop=F]) # join them
DE2 <- cbind(DE2, rep(0, nrow(DE2)))  # create new column with zeros
colnames(DE2)[ncol(DE2)] <- i          # give it a name
DE2[rownames(DEfcTOT), i] <- DEfcTOT[,"adj.P.Val"]    # fill it with signed p-value
DE3 <- cbind(DE3, rep(0, nrow(DE3)))  # create new column with zeros
colnames(DE3)[ncol(DE3)] <- i          # give it a name
DE3[rownames(DEfc), i] <- DEfc[,"logFC"]    # fill it with logFC
med <- apply(Dataset[, idGR], 1, median)
medGE <- cbind(medGE, med[rownames(medGE)])
colnames(medGE)[ncol(medGE)] <- i
print(paste("done with", i))
}
DE4 <- abs(DE2)
write.table(DE1, paste0(namenorm, "/DEtot.txt"), sep = "\t", col.names=NA)
write.table(DE2, paste0(namenorm, "/DEdecFDR.txt"), sep = "\t", col.names=NA)
write.table(DE3, paste0(namenorm, "/DEdecFC.txt"), sep = "\t", col.names=NA)
write.table(DE4, paste0(namenorm, "/DEdecFDRabs.txt"), sep = "\t", col.names=NA)
write.table(medGE, paste0(namenorm, "/cpm_median.txt"), sep = "\t", col.names=NA)
write.table(summary, paste0(namenorm,"/DE_summary.txt"), sep="\t",col.names = NA, row.names =  c("under-expressed", "no difference","over-expressed"))
}
setwd("PATH/TO/DREAMchallengeDirectory/1st_submission")
library(readr)
library(limma )
library(edgeR)
#### Metadata
Metadata <- readr::read_csv("../MedatadaDream.csv")
Metadata$CoarseLabels
Metadata$CoarseLabels[ Metadata$CoarseLabels %in% c("CRC", "BRCA")] <- "cancer"
View(Metadata)
#### Metadata
Metadata <- readr::read_csv("../MedatadaDream.csv")
Metadata$CoarseLabels[ Metadata$CoarseLabels %in% c("CRC", "BRCA")] <- "cancer"
Metadata$FineLabels[ Metadata$FineLabels %in% c("CRC", "BRCA")] <- "cancer"
#### Use this for counts
Dataset <- readr::read_csv("../KallistoCounts.csv")
#### Use this for the Coarse challenge
MetadataCoarse <- Metadata[!is.na(Metadata$CoarseLabels),]
DatasetFilt <- Dataset[, MetadataCoarse$Sample]
colnames(DatasetFilt) <- MetadataCoarse$CoarseLabels
namenorm0 <- "../DEGs/DEGsCoarse"
dir.create("../DEGs")
dir.create(namenorm0)
# calculate Counts per million
DatasetNorm <- apply(DatasetFilt, 2, function(x) x/sum(x) * 10^6)
# setwd("PATH/TO/DREAMchallengeDirectory/1st_submission")
library(readr)
library(limma )
library(edgeR)
#### Metadata
Metadata <- readr::read_csv("../MedatadaDream.csv")
Metadata$CoarseLabels[ Metadata$CoarseLabels %in% c("CRC", "BRCA")] <- "cancer"
Metadata$FineLabels[ Metadata$FineLabels %in% c("CRC", "BRCA")] <- "cancer"
#### Use this for counts
Dataset <- readr::read_csv("../KallistoCounts.csv")
#### Use this for TPM
# Dataset <- readr::read_csv("../KallistoTPM.csv")
#### Use this for the Coarse challenge
MetadataCoarse <- Metadata[!is.na(Metadata$CoarseLabels),]
DatasetFilt <- Dataset[, MetadataCoarse$Sample]
colnames(DatasetFilt) <- MetadataCoarse$CoarseLabels
namenorm <- "../DEGs/DEGsCoarse"
#### Use this for the Fine challenge
# MetadataFine <- Metadata[!is.na(Metadata$FineLabels),]
# DatasetFilt <- Dataset[, MetadataFine$Sample]
# colnames(DatasetFilt) <- MetadataFine$FineLabels
# namenorm <- "../DEGs/DEGsFine"
dir.create("../DEGs")
dir.create(namenorm)
# calculate Counts per million
DatasetNorm <- apply(DatasetFilt, 2, function(x) x/sum(x) * 10^6)
dir.create(namenorm)
DatasetFilt = Dataset[apply(Dataset, 1, function(x) length(x[x>4])>=3), ]
cpm1 <- DGEList(counts = DatasetFilt, group=factor(colnames(Dataset)))
# setwd("PATH/TO/DREAMchallengeDirectory/1st_submission")
library(readr)
library(limma )
library(edgeR)
#### Metadata
Metadata <- readr::read_csv("../MedatadaDream.csv")
Metadata$CoarseLabels[ Metadata$CoarseLabels %in% c("CRC", "BRCA")] <- "cancer"
Metadata$FineLabels[ Metadata$FineLabels %in% c("CRC", "BRCA")] <- "cancer"
#### Use this for counts
Dataset <- readr::read_csv("../KallistoCounts.csv")
#### Use this for TPM
# Dataset <- readr::read_csv("../KallistoTPM.csv")
#### Use this for the Coarse challenge
MetadataCoarse <- Metadata[!is.na(Metadata$CoarseLabels),]
DatasetFilt <- Dataset[, MetadataCoarse$Sample]
colnames(DatasetFilt) <- MetadataCoarse$CoarseLabels
namenorm <- "../DEGs/DEGsCoarse"
#### Use this for the Fine challenge
# MetadataFine <- Metadata[!is.na(Metadata$FineLabels),]
# DatasetFilt <- Dataset[, MetadataFine$Sample]
# colnames(DatasetFilt) <- MetadataFine$FineLabels
# namenorm <- "../DEGs/DEGsFine"
dir.create("../DEGs")
dir.create(namenorm)
# calculate Counts per million
DatasetNorm <- apply(DatasetFilt, 2, function(x) x/sum(x) * 10^6)
dir.create(namenorm)
Dataset = DatasetNorm[apply(DatasetNorm, 1, function(x) length(x[x>4])>=3), ]
cpm1 <- DGEList(counts = Dataset, group=factor(colnames(Dataset)))
factor(colnames(Dataset))
allSamples <- colnames(Dataset)
GRall <- unique(colnames(Dataset))
DE1 <- data.frame(genes=rownames(cpm1))
rownames(DE1) <- rownames(cpm1)
DE1$genes <- NULL
DE2 <- DE1
DE3 <- DE1
medGE <- data.frame(genes=rownames(Dataset))
rownames(medGE) <- rownames(Dataset)
medGE$genes <- NULL
summary <- c()
for(i in GRall){
idGR<- which(allSamples == i)
cpm1$samples$group <- "rest"
cpm1$samples$group[idGR] <- i
cpm1$samples$group <- factor(cpm1$samples$group, levels= c( "rest", i))
design.mat <- model.matrix(~ 0 + cpm1$samples$group)
colnames(design.mat) <- levels(cpm1$samples$group)
# makeContrasts(MUvsWT=T.CD8-rest, levels=design.mat)
v <- voom(cpm1, design.mat, plot = FALSE)
fit = lmFit(v, design.mat)
fit = contrasts.fit(fit, c(-1, 1))
fit = eBayes(fit)
#####FROM HERE, select DEG only with adj pvalue<= 0.05
# just to verify the number of differentially expressed genes:
DEdt <- decideTests(fit, adjust.method="BH", p.value=0.05)
summary <- cbind(summary, summary(DEdt))
colnames(summary)[ncol(summary)] <- i
# save differentially expressed genes with adj.pvalue less than 0.05:
DEpval <- topTable(fit, sort.by = "p", p.value=0.05, n=nrow(fit))
DE1 <- cbind(DE1, rep(0, nrow(DE1)))   # create a column with zeros
colnames(DE1)[ncol(DE1)] <- i # give it a name
if(nrow(DEpval) > 0 ) { DE1[rownames(DEpval), i] <- DEpval[,"logFC"] }   # fill it with log FC
DEfc <- topTable(fit, sort.by = "p", p.value=1, n=nrow(fit)) # order by pvalue
# DEfc <- round(DEfc,3)
DEfcPOS <- DEfc[DEfc[,"logFC"] >0, "adj.P.Val", drop=F]  # now select only positive logFC
DEfcNEG <- DEfc[DEfc[,"logFC"] <0, "adj.P.Val", drop=F] * -1  # now select only negative logFC
DEfcTOT <- rbind(DEfcPOS[, ,drop=F], DEfcNEG[, ,drop=F]) # join them
DE2 <- cbind(DE2, rep(0, nrow(DE2)))  # create new column with zeros
colnames(DE2)[ncol(DE2)] <- i          # give it a name
DE2[rownames(DEfcTOT), i] <- DEfcTOT[,"adj.P.Val"]    # fill it with signed p-value
DE3 <- cbind(DE3, rep(0, nrow(DE3)))  # create new column with zeros
colnames(DE3)[ncol(DE3)] <- i          # give it a name
DE3[rownames(DEfc), i] <- DEfc[,"logFC"]    # fill it with logFC
med <- apply(Dataset[, idGR], 1, median)
medGE <- cbind(medGE, med[rownames(medGE)])
colnames(medGE)[ncol(medGE)] <- i
print(paste("done with", i))
}
DE4 <- abs(DE2)
write.table(DE1, paste0(namenorm, "/DEtot.txt"), sep = "\t", col.names=NA)
write.table(DE2, paste0(namenorm, "/DEdecFDR.txt"), sep = "\t", col.names=NA)
write.table(DE3, paste0(namenorm, "/DEdecFC.txt"), sep = "\t", col.names=NA)
write.table(DE4, paste0(namenorm, "/DEdecFDRabs.txt"), sep = "\t", col.names=NA)
write.table(medGE, paste0(namenorm, "/cpm_median.txt"), sep = "\t", col.names=NA)
write.table(summary, paste0(namenorm,"/DE_summary.txt"), sep="\t",col.names = NA, row.names =  c("under-expressed", "no difference","over-expressed"))
library(readr)
library(limma )
library(edgeR)
#### Metadata
Metadata <- readr::read_csv("../MedatadaDream.csv")
Metadata$CoarseLabels[ Metadata$CoarseLabels %in% c("CRC", "BRCA")] <- "cancer"
Metadata$FineLabels[ Metadata$FineLabels %in% c("CRC", "BRCA")] <- "cancer"
#### Use this for counts
Dataset <- readr::read_csv("../KallistoCounts.csv")
#### Use this for the Coarse challenge
MetadataCoarse <- Metadata[!is.na(Metadata$CoarseLabels),]
DatasetFilt <- Dataset[, MetadataCoarse$Sample]
colnames(DatasetFilt) <- MetadataCoarse$CoarseLabels
namenorm <- "../DEGs/DEGsCoarse"
dir.create("../DEGs")
dir.create(namenorm)
# calculate Counts per million
DatasetNorm <- apply(DatasetFilt, 2, function(x) x/sum(x) * 10^6)
dir.create(namenorm)
Dataset = DatasetNorm[apply(DatasetNorm, 1, function(x) length(x[x>4])>=3), ]
cpm1 <- DGEList(counts = Dataset, group=factor(colnames(Dataset)))
allSamples <- colnames(Dataset)
GRall <- unique(colnames(Dataset))
DE1 <- data.frame(genes=rownames(cpm1))
rownames(DE1) <- rownames(cpm1)
DE1$genes <- NULL
DE2 <- DE1
DE3 <- DE1
medGE <- data.frame(genes=rownames(Dataset))
rownames(medGE) <- rownames(Dataset)
medGE$genes <- NULL
summary <- c()
for(i in GRall){
idGR<- which(allSamples == i)
cpm1$samples$group <- "rest"
cpm1$samples$group[idGR] <- i
cpm1$samples$group <- factor(cpm1$samples$group, levels= c( "rest", i))
design.mat <- model.matrix(~ 0 + cpm1$samples$group)
colnames(design.mat) <- levels(cpm1$samples$group)
# makeContrasts(MUvsWT=T.CD8-rest, levels=design.mat)
v <- voom(cpm1, design.mat, plot = FALSE)
fit = lmFit(v, design.mat)
fit = contrasts.fit(fit, c(-1, 1))
fit = eBayes(fit)
#####FROM HERE, select DEG only with adj pvalue<= 0.05
# just to verify the number of differentially expressed genes:
DEdt <- decideTests(fit, adjust.method="BH", p.value=0.05)
summary <- cbind(summary, summary(DEdt))
colnames(summary)[ncol(summary)] <- i
# save differentially expressed genes with adj.pvalue less than 0.05:
DEpval <- topTable(fit, sort.by = "p", p.value=0.05, n=nrow(fit))
DE1 <- cbind(DE1, rep(0, nrow(DE1)))   # create a column with zeros
colnames(DE1)[ncol(DE1)] <- i # give it a name
if(nrow(DEpval) > 0 ) { DE1[rownames(DEpval), i] <- DEpval[,"logFC"] }   # fill it with log FC
DEfc <- topTable(fit, sort.by = "p", p.value=1, n=nrow(fit)) # order by pvalue
# DEfc <- round(DEfc,3)
DEfcPOS <- DEfc[DEfc[,"logFC"] >0, "adj.P.Val", drop=F]  # now select only positive logFC
DEfcNEG <- DEfc[DEfc[,"logFC"] <0, "adj.P.Val", drop=F] * -1  # now select only negative logFC
DEfcTOT <- rbind(DEfcPOS[, ,drop=F], DEfcNEG[, ,drop=F]) # join them
DE2 <- cbind(DE2, rep(0, nrow(DE2)))  # create new column with zeros
colnames(DE2)[ncol(DE2)] <- i          # give it a name
DE2[rownames(DEfcTOT), i] <- DEfcTOT[,"adj.P.Val"]    # fill it with signed p-value
DE3 <- cbind(DE3, rep(0, nrow(DE3)))  # create new column with zeros
colnames(DE3)[ncol(DE3)] <- i          # give it a name
DE3[rownames(DEfc), i] <- DEfc[,"logFC"]    # fill it with logFC
med <- apply(Dataset[, idGR], 1, median)
medGE <- cbind(medGE, med[rownames(medGE)])
colnames(medGE)[ncol(medGE)] <- i
print(paste("done with", i))
}
DE4 <- abs(DE2)
DE4
# setwd("PATH/TO/DREAMchallengeDirectory/1st_submission")
library(readr)
library(limma )
library(edgeR)
#### Metadata
Metadata <- readr::read_csv("../MedatadaDream.csv")
Metadata$CoarseLabels[ Metadata$CoarseLabels %in% c("CRC", "BRCA")] <- "cancer"
Metadata$FineLabels[ Metadata$FineLabels %in% c("CRC", "BRCA")] <- "cancer"
#### Use this for counts
Dataset <- readr::read_csv("../KallistoCounts.csv")
#### Use this for counts
# Dataset <- readr::read_csv("../KallistoCounts.csv")
Dataset <- read.csv("../KallistoCounts.csv")
View(Dataset)
Dataset <- readr::read_csv("../KallistoCounts.csv")
rownames(Dataset) <- Dataset$Genes
Dataset <- as.matrix(Dataset)
#### Use this for counts
Dataset <- readr::read_csv("../KallistoCounts.csv")
Dataset <- as.data.frame(Dataset)
rownames(Dataset) <- Dataset$Genes
Dataset$Genes <- NULL
#### Use this for the Coarse challenge
MetadataCoarse <- Metadata[!is.na(Metadata$CoarseLabels),]
DatasetFilt <- Dataset[, MetadataCoarse$Sample]
colnames(DatasetFilt) <- MetadataCoarse$CoarseLabels
namenorm <- "../DEGs/DEGsCoarse"
#### Use this for the Fine challenge
# MetadataFine <- Metadata[!is.na(Metadata$FineLabels),]
# DatasetFilt <- Dataset[, MetadataFine$Sample]
# colnames(DatasetFilt) <- MetadataFine$FineLabels
# namenorm <- "../DEGs/DEGsFine"
dir.create("../DEGs")
dir.create(namenorm)
# calculate Counts per million
DatasetNorm <- apply(DatasetFilt, 2, function(x) x/sum(x) * 10^6)
dir.create(namenorm)
Dataset = DatasetNorm[apply(DatasetNorm, 1, function(x) length(x[x>4])>=3), ]
cpm1 <- DGEList(counts = Dataset, group=factor(colnames(Dataset)))
allSamples <- colnames(Dataset)
GRall <- unique(colnames(Dataset))
DE1 <- data.frame(genes=rownames(cpm1))
rownames(DE1) <- rownames(cpm1)
DE1$genes <- NULL
DE2 <- DE1
DE3 <- DE1
medGE <- data.frame(genes=rownames(Dataset))
rownames(medGE) <- rownames(Dataset)
medGE$genes <- NULL
summary <- c()
for(i in GRall){
idGR<- which(allSamples == i)
cpm1$samples$group <- "rest"
cpm1$samples$group[idGR] <- i
cpm1$samples$group <- factor(cpm1$samples$group, levels= c( "rest", i))
design.mat <- model.matrix(~ 0 + cpm1$samples$group)
colnames(design.mat) <- levels(cpm1$samples$group)
# makeContrasts(MUvsWT=T.CD8-rest, levels=design.mat)
v <- voom(cpm1, design.mat, plot = FALSE)
fit = lmFit(v, design.mat)
fit = contrasts.fit(fit, c(-1, 1))
fit = eBayes(fit)
#####FROM HERE, select DEG only with adj pvalue<= 0.05
# just to verify the number of differentially expressed genes:
DEdt <- decideTests(fit, adjust.method="BH", p.value=0.05)
summary <- cbind(summary, summary(DEdt))
colnames(summary)[ncol(summary)] <- i
# save differentially expressed genes with adj.pvalue less than 0.05:
DEpval <- topTable(fit, sort.by = "p", p.value=0.05, n=nrow(fit))
DE1 <- cbind(DE1, rep(0, nrow(DE1)))   # create a column with zeros
colnames(DE1)[ncol(DE1)] <- i # give it a name
if(nrow(DEpval) > 0 ) { DE1[rownames(DEpval), i] <- DEpval[,"logFC"] }   # fill it with log FC
DEfc <- topTable(fit, sort.by = "p", p.value=1, n=nrow(fit)) # order by pvalue
# DEfc <- round(DEfc,3)
DEfcPOS <- DEfc[DEfc[,"logFC"] >0, "adj.P.Val", drop=F]  # now select only positive logFC
DEfcNEG <- DEfc[DEfc[,"logFC"] <0, "adj.P.Val", drop=F] * -1  # now select only negative logFC
DEfcTOT <- rbind(DEfcPOS[, ,drop=F], DEfcNEG[, ,drop=F]) # join them
DE2 <- cbind(DE2, rep(0, nrow(DE2)))  # create new column with zeros
colnames(DE2)[ncol(DE2)] <- i          # give it a name
DE2[rownames(DEfcTOT), i] <- DEfcTOT[,"adj.P.Val"]    # fill it with signed p-value
DE3 <- cbind(DE3, rep(0, nrow(DE3)))  # create new column with zeros
colnames(DE3)[ncol(DE3)] <- i          # give it a name
DE3[rownames(DEfc), i] <- DEfc[,"logFC"]    # fill it with logFC
med <- apply(Dataset[, idGR], 1, median)
medGE <- cbind(medGE, med[rownames(medGE)])
colnames(medGE)[ncol(medGE)] <- i
print(paste("done with", i))
}
DE4 <- abs(DE2)
write.table(DE1, paste0(namenorm, "/DEtot.txt"), sep = "\t", col.names=NA)
write.table(DE2, paste0(namenorm, "/DEdecFDR.txt"), sep = "\t", col.names=NA)
write.table(DE3, paste0(namenorm, "/DEdecFC.txt"), sep = "\t", col.names=NA)
write.table(DE4, paste0(namenorm, "/DEdecFDRabs.txt"), sep = "\t", col.names=NA)
write.table(medGE, paste0(namenorm, "/cpm_median.txt"), sep = "\t", col.names=NA)
write.table(summary, paste0(namenorm,"/DE_summary.txt"), sep="\t",col.names = NA, row.names =  c("under-expressed", "no difference","over-expressed"))
# setwd("PATH/TO/DREAMchallengeDirectory/1st_submission")
library(readr)
library(limma )
library(edgeR)
#### Metadata
Metadata <- readr::read_csv("../MedatadaDream.csv")
Metadata$CoarseLabels[ Metadata$CoarseLabels %in% c("CRC", "BRCA")] <- "cancer"
Metadata$FineLabels[ Metadata$FineLabels %in% c("CRC", "BRCA")] <- "cancer"
#### Use this for counts
Dataset <- readr::read_csv("../KallistoCounts.csv")
Dataset <- as.data.frame(Dataset)
rownames(Dataset) <- Dataset$Genes
Dataset$Genes <- NULL
MetadataFine <- Metadata[!is.na(Metadata$FineLabels),]
DatasetFilt <- Dataset[, MetadataFine$Sample]
colnames(DatasetFilt) <- MetadataFine$FineLabels
namenorm <- "../DEGs/DEGsFine"
dir.create("../DEGs")
dir.create(namenorm)
# calculate Counts per million
DatasetNorm <- apply(DatasetFilt, 2, function(x) x/sum(x) * 10^6)
dir.create(namenorm)
Dataset = DatasetNorm[apply(DatasetNorm, 1, function(x) length(x[x>4])>=3), ]
cpm1 <- DGEList(counts = Dataset, group=factor(colnames(Dataset)))
allSamples <- colnames(Dataset)
GRall <- unique(colnames(Dataset))
DE1 <- data.frame(genes=rownames(cpm1))
rownames(DE1) <- rownames(cpm1)
DE1$genes <- NULL
DE2 <- DE1
DE3 <- DE1
medGE <- data.frame(genes=rownames(Dataset))
rownames(medGE) <- rownames(Dataset)
medGE$genes <- NULL
summary <- c()
for(i in GRall){
idGR<- which(allSamples == i)
cpm1$samples$group <- "rest"
cpm1$samples$group[idGR] <- i
cpm1$samples$group <- factor(cpm1$samples$group, levels= c( "rest", i))
design.mat <- model.matrix(~ 0 + cpm1$samples$group)
colnames(design.mat) <- levels(cpm1$samples$group)
# makeContrasts(MUvsWT=T.CD8-rest, levels=design.mat)
v <- voom(cpm1, design.mat, plot = FALSE)
fit = lmFit(v, design.mat)
fit = contrasts.fit(fit, c(-1, 1))
fit = eBayes(fit)
#####FROM HERE, select DEG only with adj pvalue<= 0.05
# just to verify the number of differentially expressed genes:
DEdt <- decideTests(fit, adjust.method="BH", p.value=0.05)
summary <- cbind(summary, summary(DEdt))
colnames(summary)[ncol(summary)] <- i
# save differentially expressed genes with adj.pvalue less than 0.05:
DEpval <- topTable(fit, sort.by = "p", p.value=0.05, n=nrow(fit))
DE1 <- cbind(DE1, rep(0, nrow(DE1)))   # create a column with zeros
colnames(DE1)[ncol(DE1)] <- i # give it a name
if(nrow(DEpval) > 0 ) { DE1[rownames(DEpval), i] <- DEpval[,"logFC"] }   # fill it with log FC
DEfc <- topTable(fit, sort.by = "p", p.value=1, n=nrow(fit)) # order by pvalue
# DEfc <- round(DEfc,3)
DEfcPOS <- DEfc[DEfc[,"logFC"] >0, "adj.P.Val", drop=F]  # now select only positive logFC
DEfcNEG <- DEfc[DEfc[,"logFC"] <0, "adj.P.Val", drop=F] * -1  # now select only negative logFC
DEfcTOT <- rbind(DEfcPOS[, ,drop=F], DEfcNEG[, ,drop=F]) # join them
DE2 <- cbind(DE2, rep(0, nrow(DE2)))  # create new column with zeros
colnames(DE2)[ncol(DE2)] <- i          # give it a name
DE2[rownames(DEfcTOT), i] <- DEfcTOT[,"adj.P.Val"]    # fill it with signed p-value
DE3 <- cbind(DE3, rep(0, nrow(DE3)))  # create new column with zeros
colnames(DE3)[ncol(DE3)] <- i          # give it a name
DE3[rownames(DEfc), i] <- DEfc[,"logFC"]    # fill it with logFC
med <- apply(Dataset[, idGR], 1, median)
medGE <- cbind(medGE, med[rownames(medGE)])
colnames(medGE)[ncol(medGE)] <- i
print(paste("done with", i))
}
DE4 <- abs(DE2)
write.table(DE1, paste0(namenorm, "/DEtot.txt"), sep = "\t", col.names=NA)
write.table(DE2, paste0(namenorm, "/DEdecFDR.txt"), sep = "\t", col.names=NA)
write.table(DE3, paste0(namenorm, "/DEdecFC.txt"), sep = "\t", col.names=NA)
write.table(DE4, paste0(namenorm, "/DEdecFDRabs.txt"), sep = "\t", col.names=NA)
write.table(medGE, paste0(namenorm, "/cpm_median.txt"), sep = "\t", col.names=NA)
write.table(summary, paste0(namenorm,"/DE_summary.txt"), sep="\t",col.names = NA, row.names =  c("under-expressed", "no difference","over-expressed"))
